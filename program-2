import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

df = pd.read_csv("wine.csv")
X = df.drop(["Wine"], axis = 1).values
Y = df["Wine"].values

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)

from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
X_train = ss.fit_transform(X_train)
X_test = ss.transform(X_test)

from sklearn.decomposition import PCA
pca = PCA(n_components = 2)
X_train = pca.fit_transform(X_train)
X_test = pca.transform(X_test)
evr = pca.explained_variance_ratio_
print(evr)
print(f"sum = {round(sum(evr), 2)}%")

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, Y_train)
Y_pred = model.predict(X_test)

from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
cm = confusion_matrix(Y_test, Y_pred)
cr = classification_report(Y_test, Y_pred)
acc = accuracy_score(Y_test, Y_pred)
print(cm)
print(cr)

def plot_decision_boundary(classifier, X, y, title="Logistic Regression", xlabel="Feature 1", ylabel="Feature 2"):
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    
    x1, x2 = np.meshgrid(np.arange(x1_min, x1_max, 0.01), np.arange(x2_min, x2_max, 0.01))
    
    pred = classifier.predict(np.c_[x1.ravel(), x2.ravel()]).reshape(x1.shape)
    
    plt.contourf(x1, x2, pred, alpha=0.5, cmap = ListedColormap(["purple", "green", "blue"]))
    
    for i, j in enumerate(np.unique(y)):
        plt.scatter(X[y==j, 0], X[y==j, 1], c= ListedColormap(["purple", "green", "blue"])(i), label=f"Class {j}")
    
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.legend()
    plt.show()

plot_decision_boundary(model, X_train, Y_train, title="Logistic Regression (Training)", xlabel="PC 1", ylabel = "PC 2")
plot_decision_boundary(model, X_test, Y_test, title="Logistic Regression (Testing)", xlabel="PC 1", ylabel = "PC 2")
